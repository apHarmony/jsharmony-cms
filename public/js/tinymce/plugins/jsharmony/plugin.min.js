tinymce.PluginManager.add('jsharmony', function(editor, url) {
  for (var key in ICONS) {
    editor.ui.registry.addIcon(ICONS[key].name, ICONS[key].svg);
  }
  new JsHarmonyPlugin(editor).initialize();
});

/**
 * @class
 */
function JsHarmonyPlugin(editor) {
  this._editor = editor
}

/**
 * Create the menu button for picking components to insert.
 * @private
 */
JsHarmonyPlugin.prototype.createComponentInsertMenu = function() {
  var self = this;

  self._editor.ui.registry.addMenuButton('jsHarmonyComponents', {
    icon: ICONS.widgets.name,
    text: 'Components',
    fetch: function(cb) {
      var items = [
        { componentType: 'banner', icon: ICONS.insert_photo.name, text: 'Banner' },
        { componentType: 'slideshow', icon: ICONS.photo_library.name, text: 'Slideshow' },
      ]

      items = _.map(items, function(item) {
        return {
          type: 'menuitem',
          text: item.text,
          icon: item.icon,
          onAction: function() { self.insertComponentContent(item.componentType); }
        }
      });
      cb(items)
    }
  });
}

/**
 * Create and register the context toolbar for editing
 * the component properties and data.
 * @private
 */
JsHarmonyPlugin.prototype.createContextToolbar = function() {

  var self = this;
  var propButtonId = 'jsharmonyComponentPropEditor';
  var dataButtonId = 'jsharmonyComponentDataEditor'
  var contextId = 'jsharmonyComponentContextToolbar';

  self._editor.ui.registry.addButton(propButtonId, {
    tooltip: 'Edit Properties',
    text: 'Properties',
    icon: ICONS.settings.name,
    onAction: function() { self._editor.execCommand(COMMAND_NAMES.editComponentProperties); }
  });

  self._editor.ui.registry.addButton(dataButtonId, {
    tooltip: 'Edit Data',
    text: 'Data',
    icon:  ICONS.edit.name,
    onAction: function() { self._editor.execCommand(COMMAND_NAMES.editComponentData); }
  });

  var toolbar = propButtonId + ' ' + dataButtonId;

  self._editor.ui.registry.addContextToolbar(contextId, {
    predicate: function(node) {
      return self._editor.dom.is(node, '[data-component]');
    },
    items: toolbar,
    scope: 'node',
    position: 'node'
  });
}

/**
 * When an undo or redo event occurs in the editor
 * the component needs to be re-rendered.
 * @private
 * @param {object} e - the undo/redo event from the TinyMCE editor
 */
JsHarmonyPlugin.prototype.handleUndoRedo = function(e) {
  var self = this;
  var content = e.level.content;
  if (!content) return;
  var parser = new tinymce.html.DomParser({validate: false});
  parser.addAttributeFilter('data-component-id', function(nodes, name) {
    for (var i = 0; i < nodes.length; i++) {
      var node = nodes[i];
      var id = node.attributes.map['data-component-id'];
      var type = node.attributes.map['data-component'];
      if (id && type) {
        self._editor.fire(EVENT_NAMES.renderComponent, self.makeComponentEvent(id, type));
      }
    }
  });
  parser.parse(content);
}

/**
 * Initialize the plugin.
 * Do not call this more than one time per editor instance.
 * @public
 */
JsHarmonyPlugin.prototype.initialize = function() {

  var self = this;

  this.createContextToolbar();
  this.createComponentInsertMenu();

  this._editor.on('undo', function(info) { self.handleUndoRedo(info); });
  this._editor.on('redo', function(info) { self.handleUndoRedo(info); });

  this._editor.addCommand(COMMAND_NAMES.editComponentData, function() {
    var el = self._editor.selection.getStart();
    if (el && el._componentInterface && el._componentInterface.openDataEditor) {
      el._componentInterface.openDataEditor();
    }
  });

  this._editor.addCommand(COMMAND_NAMES.editComponentProperties, function() {
    var el = self._editor.selection.getStart();
    if (el && el._componentInterface && el._componentInterface.openPropertiesEditor) {
      el._componentInterface.openPropertiesEditor();
    }
  });

  this._editor.on('init', function() {
    self._editor.serializer.addNodeFilter('div', function(nodes) { self.serializerFilter(nodes); });
    self._editor.parser.addAttributeFilter('data-component', function(nodes) { self.parseFilter(nodes); });
  });
}

/**
 * Insert the component into the editor.
 * @private
 * @param {string} componentType - the type of the component to insert.
 */
JsHarmonyPlugin.prototype.insertComponentContent = function(componentType) {
  var id = this.makeComponentId(componentType)
  this._editor.insertContent(this.makeComponentContainer(componentType, id));
  // Don't need to fire the insert event here.
  // We have a parser filter that will detect the insert and
  // fire the event.
}

/**
 * Create the component container HTML string for
 * inserting into the editor.
 * @private
 * @param {string} componentType - the type of component to create
 * @param {string} id - the ID to uniquely identify the component.
 * @returns {string} - HTML string
 */
JsHarmonyPlugin.prototype.makeComponentContainer = function(componentType, id) {
  return '<div data-component="' + componentType +'" data-component-id="' + id + '" data-component-properties="" data-component-content="" class="mceNonEditable"></div>';
}

/**
 * Create a component event.
 * @private
 * @param {string} componentId - the ID of the component that is the event target
 * @param {string} componentType - the type of the component that is the event target
 * @return {ComponentEvent}
 */
JsHarmonyPlugin.prototype.makeComponentEvent = function(componentId, componentType) {
  return {
    componentId: componentId,
    componentType: componentType
  };
}

/**
 * Create a random ID for uniquely identifying
 * each component add via the editor.
 * @private
 * @returns {string}
 */
JsHarmonyPlugin.prototype.makeComponentId = function(componentType) {
  // Be careful using this since it contains numbers
  // and in most cases a leading char that is a number for an identifer is bad.
  var charSet = '_01234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYz'
  var maxNumber = charSet.length; // Values will be strictly less than max number.
  var randomLength = 10;
  var randomPart = '';
  for (var i = 0; i < randomLength; i++) {
    randomPart += charSet[Math.floor(Math.random() * maxNumber)]
  }
  return componentType + '_' + randomPart;
}

/**
 * Filter the TinyMce content parsed nodes.
 * @private
 * @param {Array.<object>} nodes - a list of TinyMce nodes
 */
JsHarmonyPlugin.prototype.parseFilter = function(nodes) {
  var self = this;
  _.each(nodes, function(node) {
    var id = node.attributes.map['data-component-id'];
    var type = node.attributes.map['data-component'];
    // Content is not actually in the DOM yet.
    // Wait for next loop
    setTimeout(function() {
      self._editor.fire(EVENT_NAMES.renderComponent, self.makeComponentEvent(id, type));
    });
  });
}

/**
 * Filter the TinyMce content to find relevant components
 * and serialize the components for save.
 * @private
 * @param {Array.<object>} nodes - a list of TinyMce nodes
 */
JsHarmonyPlugin.prototype.serializerFilter = function(nodes) {
  for(var i = 0; i < nodes.length; i++) {
    var node = nodes[i];
    var componentAttr = node.attr('data-component');
    if (componentAttr == undefined || componentAttr.length < 1) {
      continue;
    }
    node.empty();
  }
}

/**
 * @typedef {Object} IconDefinition
 * @property {string} name - the name the icon is registered as
 * @property {string} svg - the SVG data for the icon
 */

/**
 * @typedef {Object} ComponentEvent
 * @property {string} id - the ID of the component for the event target.
 * @property {string} type - the component type for the event target.
 */

/**
 * Each icon definition will be registered with the editor
 * and available for use within the editor by name property.
 * @type {Object.<string, IconDefinition>}
 **/
 var ICONS = {
  edit: {
    name: 'material_edit',
    svg:
      '<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24"' +
      '><path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.' +
      '02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"/><p' +
      'ath d="M0 0h24v24H0z" fill="none"/></svg>'
  },
  insert_photo: {
    name: 'material_insert_photo',
    svg:
      '<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24"' +
      '><path d="M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9' +
      ' 2-2zM8.5 13.5l2.53.01L14.5 12l4.5 6H5l3.5-4.5z"/><path d="M0 0h24v24H0z" fill="none"/></svg>'
  },
  photo_library: {
    name: 'material_photo_library',
    svg:
      '<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24"' +
      '><path d="M0 0h24v24H0z" fill="none"/><path d="M22 16V4c0-1.1-.9-2-2-2H8c-1.1 0-2 ' +
      '.9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2zm-11-4l2.03 2.71L16 11l4 5H8l3-4zM2 6v14' +
      'c0 1.1.9 2 2 2h14v-2H4V6H2z"/></svg>'
  },
  settings: {
    name: 'material_setting',
    svg:
      '<svg xmlns="http://www.w3.org/2000/svg" enable-background="new 0 0 24 24" height="' +
      '24" viewBox="0 0 24 24" width="24"><g><path d="M0,0h24v24H0V0z" fill="none"/><path' +
      ' d="M19.14,12.94c0.04-0.3,0.06-0.61,0.06-0.94c0-0.32-0.02-0.64-0.07-0.94l2.03-1.58' +
      'c0.18-0.14,0.23-0.41,0.12-0.61 l-1.92-3.32c-0.12-0.22-0.37-0.29-0.59-0.22l-2.39,0.' +
      '96c-0.5-0.38-1.03-0.7-1.62-0.94L14.4,2.81c-0.04-0.24-0.24-0.41-0.48-0.41 h-3.84c-0' +
      '.24,0-0.43,0.17-0.47,0.41L9.25,5.35C8.66,5.59,8.12,5.92,7.63,6.29L5.24,5.33c-0.22-' +
      '0.08-0.47,0-0.59,0.22L2.74,8.87 C2.62,9.08,2.66,9.34,2.86,9.48l2.03,1.58C4.84,11.3' +
      '6,4.8,11.69,4.8,12s0.02,0.64,0.07,0.94l-2.03,1.58 c-0.18,0.14-0.23,0.41-0.12,0.61l' +
      '1.92,3.32c0.12,0.22,0.37,0.29,0.59,0.22l2.39-0.96c0.5,0.38,1.03,0.7,1.62,0.94l0.36' +
      ',2.54 c0.05,0.24,0.24,0.41,0.48,0.41h3.84c0.24,0,0.44-0.17,0.47-0.41l0.36-2.54c0.5' +
      '9-0.24,1.13-0.56,1.62-0.94l2.39,0.96 c0.22,0.08,0.47,0,0.59-0.22l1.92-3.32c0.12-0.' +
      '22,0.07-0.47-0.12-0.61L19.14,12.94z M12,15.6c-1.98,0-3.6-1.62-3.6-3.6 s1.62-3.6,3.' +
      '6-3.6s3.6,1.62,3.6,3.6S13.98,15.6,12,15.6z"/></g></svg>'
  },
  widgets: {
    name: 'material_widgets',
    svg:
      '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="black" width="18' +
      'px" height="18px"><path d="M13 13v8h8v-8h-8zM3 21h8v-8H3v8zM3 3v8h8V3H3zm13.66-1.3' +
      '1L11 7.34 16.66 13l5.66-5.66-5.66-5.65z"/><path d="M0 0h24v24H0z" fill="none"/></svg>'
  }
};

/**
 * This defines commands that can be used for the plugin.
 * @type {Object.<string, string>}
 */
var COMMAND_NAMES = {
  editComponentProperties: 'jsharmonyEditComponentProperties',
  editComponentData: 'jsharmonyEditComponentData'
};

/**
 * This defines event names that can be used for the plugin.
 * @type {Object.<string, string>}
 */
var EVENT_NAMES = {
  renderComponent:  'jsHarmonyRenderComponent'
};